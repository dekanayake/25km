"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const core_1 = require("@aws-cdk/core");
const apigateway = require("@aws-cdk/aws-apigateway");
class ApiLambdaStack extends cdk.Stack {
    constructor(app, id, props) {
        super(app, id);
        const placesLambda = new lambda.Function(this, "placesLambda", {
            functionName: 'placesLambda',
            description: 'Places lambda',
            code: lambda.Code.fromAsset("./lambda/place-nearby-lambda/places-service.zip"),
            handler: 'handler.nearByPlaces',
            timeout: core_1.Duration.minutes(1),
            runtime: lambda.Runtime.NODEJS_12_X,
        });
        const apiGatewayRestApi = new apigateway.RestApi(this, "placesApi", {
            deployOptions: {
                loggingLevel: apigateway.MethodLoggingLevel.INFO,
                dataTraceEnabled: true
            },
            defaultCorsPreflightOptions: {
                allowOrigins: apigateway.Cors.ALL_ORIGINS,
                allowMethods: apigateway.Cors.ALL_METHODS,
            }
        });
        const places = apiGatewayRestApi.root.addResource("places");
        const nearBy = places.addResource("nearBy");
        const placesLambdaIntegration = new apigateway.LambdaIntegration(placesLambda, {
            contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,
            allowTestInvoke: true
        });
        nearBy.addMethod("POST", placesLambdaIntegration);
    }
}
exports.ApiLambdaStack = ApiLambdaStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLWxhbWJkYS1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwaS1sYW1iZGEtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBc0M7QUFLdEMsOENBQStDO0FBQy9DLHdDQUF5QztBQUN6QyxzREFBdUQ7QUFNdkQsTUFBYSxjQUFlLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDekMsWUFBWSxHQUFZLEVBQUUsRUFBVSxFQUFFLEtBQXFCO1FBQ3ZELEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFZixNQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUMzRCxZQUFZLEVBQUUsY0FBYztZQUM1QixXQUFXLEVBQUUsZUFBZTtZQUM1QixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsaURBQWlELENBQUM7WUFDOUUsT0FBTyxFQUFFLHNCQUFzQjtZQUMvQixPQUFPLEVBQUMsZUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDM0IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztTQUNwQyxDQUFDLENBQUM7UUFFSCxNQUFNLGlCQUFpQixHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFHO1lBQ25FLGFBQWEsRUFBRTtnQkFDYixZQUFZLEVBQUUsVUFBVSxDQUFDLGtCQUFrQixDQUFDLElBQUk7Z0JBQ2hELGdCQUFnQixFQUFFLElBQUk7YUFDdkI7WUFDRCwyQkFBMkIsRUFBRTtnQkFDM0IsWUFBWSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVztnQkFDekMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVzthQUMxQztTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDM0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUUzQyxNQUFNLHVCQUF1QixHQUFHLElBQUksVUFBVSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBQztZQUM1RSxlQUFlLEVBQUUsVUFBVSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUI7WUFDN0QsZUFBZSxFQUFDLElBQUk7U0FDckIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsdUJBQXVCLENBQUMsQ0FBQTtJQUN2RCxDQUFDO0NBQ0o7QUFsQ0Qsd0NBa0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NvcmUnKTtcbmltcG9ydCBzMyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1zMycpO1xuaW1wb3J0ICogYXMgZHluYW1vZGIgZnJvbSAnQGF3cy1jZGsvYXdzLWR5bmFtb2RiJztcbmltcG9ydCB7IFByb2plY3Rpb25UeXBlIH0gZnJvbSAnQGF3cy1jZGsvYXdzLWR5bmFtb2RiJztcbmltcG9ydCBpYW0gPSAgcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWlhbScpO1xuaW1wb3J0IGxhbWJkYSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnKTtcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgYXBpZ2F0ZXdheSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1hcGlnYXRld2F5Jyk7IFxuaW1wb3J0IHtBd3NDdXN0b21SZXNvdXJjZSxBd3NDdXN0b21SZXNvdXJjZVBvbGljeX0gZnJvbSAnQGF3cy1jZGsvY3VzdG9tLXJlc291cmNlcyc7XG5cbmludGVyZmFjZSBBcGlMYW1iZGFQcm9wcyAge1xufVxuXG5leHBvcnQgY2xhc3MgQXBpTGFtYmRhU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICAgIGNvbnN0cnVjdG9yKGFwcDogY2RrLkFwcCwgaWQ6IHN0cmluZywgcHJvcHM6IEFwaUxhbWJkYVByb3BzKXtcbiAgICAgICAgc3VwZXIoYXBwLCBpZCk7XG5cbiAgICAgICAgY29uc3QgcGxhY2VzTGFtYmRhID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcInBsYWNlc0xhbWJkYVwiLCB7XG4gICAgICAgICAgICBmdW5jdGlvbk5hbWU6ICdwbGFjZXNMYW1iZGEnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQbGFjZXMgbGFtYmRhJyxcbiAgICAgICAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChcIi4vbGFtYmRhL3BsYWNlLW5lYXJieS1sYW1iZGEvcGxhY2VzLXNlcnZpY2UuemlwXCIpLFxuICAgICAgICAgICAgaGFuZGxlcjogJ2hhbmRsZXIubmVhckJ5UGxhY2VzJyxcbiAgICAgICAgICAgIHRpbWVvdXQ6RHVyYXRpb24ubWludXRlcygxKSxcbiAgICAgICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xMl9YLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY29uc3QgYXBpR2F0ZXdheVJlc3RBcGkgPSBuZXcgYXBpZ2F0ZXdheS5SZXN0QXBpKHRoaXMsIFwicGxhY2VzQXBpXCIsICB7XG4gICAgICAgICAgICBkZXBsb3lPcHRpb25zOiB7XG4gICAgICAgICAgICAgIGxvZ2dpbmdMZXZlbDogYXBpZ2F0ZXdheS5NZXRob2RMb2dnaW5nTGV2ZWwuSU5GTyxcbiAgICAgICAgICAgICAgZGF0YVRyYWNlRW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmF1bHRDb3JzUHJlZmxpZ2h0T3B0aW9uczoge1xuICAgICAgICAgICAgICBhbGxvd09yaWdpbnM6IGFwaWdhdGV3YXkuQ29ycy5BTExfT1JJR0lOUyxcbiAgICAgICAgICAgICAgYWxsb3dNZXRob2RzOiBhcGlnYXRld2F5LkNvcnMuQUxMX01FVEhPRFMgLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY29uc3QgcGxhY2VzID0gYXBpR2F0ZXdheVJlc3RBcGkucm9vdC5hZGRSZXNvdXJjZShcInBsYWNlc1wiKVxuICAgICAgICAgIGNvbnN0IG5lYXJCeSA9IHBsYWNlcy5hZGRSZXNvdXJjZShcIm5lYXJCeVwiKVxuXG4gICAgICAgICAgY29uc3QgcGxhY2VzTGFtYmRhSW50ZWdyYXRpb24gPSBuZXcgYXBpZ2F0ZXdheS5MYW1iZGFJbnRlZ3JhdGlvbihwbGFjZXNMYW1iZGEse1xuICAgICAgICAgICAgY29udGVudEhhbmRsaW5nOiBhcGlnYXRld2F5LkNvbnRlbnRIYW5kbGluZy5DT05WRVJUX1RPX0JJTkFSWSxcbiAgICAgICAgICAgIGFsbG93VGVzdEludm9rZTp0cnVlXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBuZWFyQnkuYWRkTWV0aG9kKFwiUE9TVFwiLCBwbGFjZXNMYW1iZGFJbnRlZ3JhdGlvbilcbiAgICB9XG59XG5cbiJdfQ==